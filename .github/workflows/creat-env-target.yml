name: Get Environment Data

on:
  workflow_dispatch:

jobs:
  environment-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_GITHUB_PAT }}
          path: ./source-repo

      - name: Set up jq
        run: sudo apt-get install -y jq

      - name: Create output directory
        run: |
          if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
            mkdir -p "${{ github.workspace }}/source-repo/output"
          fi

      - name: Iterate Over Repos
        run: |
            #!/bin/bash

            # Define the GitHub token and output file
            GITHUB_TOKEN="${{ secrets.GH_GITHUB_PAT }}"
            OUTPUT_FILE="${{ github.workspace }}/source-repo/output/environments_and_settings.json"
        
            # Clear or create the output file
            > $OUTPUT_FILE
        
            # Read the repositories from the file
            mapfile -t repositories < "${{ github.workspace }}/source-repo/repositories.txt"
        
            # Loop through each repository
            for repo in "${repositories[@]}"; do
                IFS='/' read -r org_name repo_name <<< "$repo"
                echo "Processing repository: $org_name/$repo_name"
            
                # Get all environments for the repository
                environments=$(curl -s -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "https://api.github.com/repos/$org_name/$repo_name/environments" | jq -r '.environments[].name')
            
                # Loop through each environment
                for environment in $environments; do
                    # Get the environment settings
                    environment_settings=$(curl -s -L \
                        -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        "https://api.github.com/repos/$org_name/$repo_name/environments/$environment" | jq '{can_admins_bypass, protection_rules, wait_timer, deployment_branch_policy}')
                
                    # Save the results to the output file
                    echo -e "Repository: ${org_name}/${repo_name}\nEnvironment: ${environment}\nSettings:\n${environment_settings}\n" >> $OUTPUT_FILE
                done
            done
        
            echo "Completed processing all repositories. Results saved in ${OUTPUT_FILE}"
        

      - name: Upload environments and settings data
        uses: actions/upload-artifact@v4
        with:
            name: environments_and_settings.json
            path: ${{ github.workspace }}/source-repo/output


  create-new-env:
    runs-on: ubuntu-latest
    needs: environment-data

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_GITHUB_PAT }}
          path: ./source-repo

      - name: Download environments and settings data
        uses: actions/download-artifact@v4
        with:
            name: environments_and_settings.json
            path: ${{ github.workspace }}/source-repo/output

      - name: create the environment
        run: |
            #!/bin/bash

            # Define the GitHub token for the target organization and the input file
            TARGET_GITHUB_TOKEN="${{ secrets.GH_GITHUB_PAT }}"
            INPUT_FILE="${{ github.workspace }}/source-repo/output/environments_and_settings.json"
            TARGET_ORG_NAME="ops-team-kp"

            # Function to create an environment in the target organization
            create_environment() {
                local target_org=$1
                local repo_name=$2
                local env_name=$3
                local settings=$4

                # Create the environment in the target repository
                curl -s -L \
                    -X POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${TARGET_GITHUB_TOKEN}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    -d "$settings" \
                    "https://api.github.com/repos/$target_org/$repo_name/environments/$env_name"
            }

            # Check if a repository exists in the target organization
            repository_exists() {
                local target_org=$1
                local repo_name=$2

                response=$(curl -s -o /dev/null -w "%{http_code}" -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${TARGET_GITHUB_TOKEN}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "https://api.github.com/repos/$target_org/$repo_name")

                if [ "$response" == "200" ]; then
                    return 0
                else
                    return 1
                fi
            }

            # Read the JSON file and process each entry
            jq -c '.[]' "$INPUT_FILE" | while read -r entry; do
                repo_name=$(echo "$entry" | jq -r '.repository')
                env_name=$(echo "$entry" | jq -r '.environment')
                env_settings=$(echo "$entry" | jq -c '.settings')

                # Check if the repository exists in the target organization
                if repository_exists "$TARGET_ORG_NAME" "$repo_name"; then
                    echo "Creating environment: $env_name in repository: $TARGET_ORG_NAME/$repo_name"
                    create_environment "$TARGET_ORG_NAME" "$repo_name" "$env_name" "$env_settings"
                else
                    echo "Repository $TARGET_ORG_NAME/$repo_name does not exist. Skipping..."
                fi
            done

            echo "Completed processing all repositories and creating environments in the target organization."

      - name: Commit and push changes
        
        run: |
              cd ./source-repo
              pwd

              git config --global user.name 'KrushnaPimpale'
              git config --global user.email 'kpimple656@gmail.com'
              git add .
              git commit -m 'Created the Environment in target repo'
              git push      
        


  
        
        
      