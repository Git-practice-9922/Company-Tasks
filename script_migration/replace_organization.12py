import os
import openpyxl
import fnmatch

def load_mapping(sheet):
    mapping = {}
    for row in sheet.iter_rows(min_row=2, values_only=True):
        repo_name = row[0]
        target_org = row[1]
        mapping[repo_name] = target_org
    return mapping

def replace_in_file(file_path, original_string, replacement_string):
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()

    new_content = content.replace(original_string, replacement_string)

    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(new_content)

def should_exclude(path, exclude_patterns):
    for pattern in exclude_patterns:
        if fnmatch.fnmatch(path, pattern):
            return True
    return False

def replace_in_repo(repo_path, repo_name, target_org, exclude_patterns):
    original_string = "Legal-General-Digital"
    replacement_string = f"Legal-General-{target_org}"

    for root, dirs, files in os.walk(repo_path):
        # Exclude specified directories
        dirs[:] = [d for d in dirs if not should_exclude(os.path.join(root, d), exclude_patterns)]
        for file in files:
            file_path = os.path.join(root, file)
            if not should_exclude(file_path, exclude_patterns):
                replace_in_file(file_path, original_string, replacement_string)

def main():
    input_file = "input.txt"
    excel_file = "target-teams-mapping.xlsx"
    exclude_patterns = ["*.git*", "node_modules*", "venv*", "__pycache__*", "input_migration", "script_migration"]

    # Load the Excel file
    wb = openpyxl.load_workbook(excel_file)
    sheet = wb.active
    mapping = load_mapping(sheet)

    # Read repository paths from input file
    with open(input_file, 'r') as file:
        repo_paths = [line.strip() for line in file]

    # Perform replacements in each repository
    for repo_path in repo_paths:
        repo_name = os.path.basename(repo_path)
        target_org = mapping.get(repo_name)
        if target_org:
            replace_in_repo(repo_path, repo_name, target_org, exclude_patterns)
        else:
            print(f"No target organization found for repository: {repo_name}")

if __name__ == "__main__":
    main()
